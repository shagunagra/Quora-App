{
  "swagger": "2.0",
  "info": {
    "title": "Answer API",
    "version": "1.0.0",
    "description": "API of Answer Services"
  },
  "host": "quora.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "API#005 Answer",
      "description": "All operations marked with 'API#005 Answer' are relevant to the answer use case"
    }
  ],
  "securityDefinitions": {
    "BearerAuthorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "paths": {
    "/question/{questionId}/answer/create": {
      "x-swagger-router-controller": "api",
      "post": {
        "tags": [
          "API#005 Create Answer"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "createAnswer",
        "summary": "createAnswer",
        "description": "User can reply to a question by creating the answer.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/questionId"
          },
          {
            "in": "body",
            "name": "AnswerRequest",
            "description": "Request containing answer information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnswerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED - Answer created successfully",
            "schema": {
              "$ref": "#/definitions/AnswerResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/answer/edit/{answerId}": {
      "x-swagger-router-controller": "api",
      "put": {
        "tags": [
          "API#005 Edit an Answer"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "editAnswerContent",
        "summary": "editAnswerContent",
        "description": "User can edit the answer if he has posted the answer.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/answerId"
          },
          {
            "in": "body",
            "name": "AnswerEditRequest",
            "description": "Request containing answer edit information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnswerEditRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Answer changed successfully",
            "schema": {
              "$ref": "#/definitions/AnswerEditResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/answer/delete/{answerId}": {
      "x-swagger-router-controller": "api",
      "delete": {
        "tags": [
          "API#004 Delete an Answer"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "deleteAnswer",
        "summary": "deleteAnswer",
        "description": "Admin or user can delete the answer if he has posted the answer.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/answerId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Answer deleted successfully",
            "schema": {
              "$ref": "#/definitions/AnswerDeleteResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/answer/all/{questionId}": {
      "x-swagger-router-controller": "api",
      "get": {
        "tags": [
          "API#004 Get the details of all Answers a for specific Question"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "getAllAnswersToQuestion",
        "summary": "getAllAnswersToQuestion",
        "description": "User can get the details of all the answers for a specific question.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/parameters/questionId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Fetched the answers successfully",
            "schema": {
              "$ref": "#/definitions/AnswerDetailsResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "questionId": {
      "name": "questionId",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Unique identifier of Question in a standard UUID format"
    },
    "answerId": {
      "name": "answerId",
      "type": "string",
      "in": "path",
      "required": true,
      "description": "Unique identifier of Answer in a standard UUID format"
    },
    "BearerAuthorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory user credentials in bearer http authentication scheme format."
    }
  },
  "definitions": {
    "AnswerRequest": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "description": "answer to the question"
        }
      },
      "required": [
        "answer"
      ]
    },
    "AnswerResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid of the answer"
        },
        "status": {
          "type": "string",
          "description": "status of the answer registered"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "AnswerEditRequest": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "updated content of the answer"
        }
      }
    },
    "AnswerEditResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "answer uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the updated answer"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "AnswerDeleteResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "answer uuid"
        },
        "status": {
          "type": "string",
          "description": "status of the deleted answer"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "AnswerDetailsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "answer uuid"
        },
        "questionContent": {
          "type": "string",
          "description": "Content of the question"
        },
        "answerContent": {
          "type": "string",
          "description": "Answer content"
        }
      },
      "required": [
        "id",
        "questionContent",
        "answerContent"
      ]
    }
  }
}