{
  "swagger": "2.0",
  "info": {
    "title": "User API",
    "version": "1.0.0",
    "description": "API of User Services"
  },
  "host": "quora.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "API#001 Users",
      "description": "All operations marked with 'API#001 Users' are relevant to the user use case"
    }
  ],
  "securityDefinitions": {
    "BasicAuthorization": {
      "type": "basic",
      "description": "HTTP Basic Authentication is used for authentication. The server authentication credentials should be sent in the Authorization header.\nBasic authentication should only be used over HTTPS (SSL).\n\nThe Authorization header is constructed as follows:\n\n- The username and password are combined into a string separated by a colon, e.g.: username:password\n- The resulting string is encoded using the RFC2045-MIME variant of Base64, except not limited to 76 char/line.\n- The authorization method and a space i.e. \"Basic \" is then put before the encoded string.\n\n```\nPOST https://quora.io/api/v1/authentication HTTP/1.1\nAuthorization: Basic YW5kcmFwcF91czpqVEdhNUVKODR0\n```\n"
    },
    "BearerAuthorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "paths": {
    "/user/signup": {
      "x-swagger-router-controller": "api",
      "post": {
        "tags": [
          "API#001 User Sign up"
        ],
        "operationId": "signupUser",
        "summary": "signup",
        "description": "Each user who needs access to Quora application should signup using their valid email address and set a password for an authorized access.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "SignupUserRequest",
            "description": "Request containing user signup information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignupUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED - User has been signuped successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "location": {
                "type": "string",
                "description": "Location of the new resource which was created by this request"
              }
            },
            "schema": {
              "$ref": "#/definitions/SignupUserResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "422": {
            "description": "UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request flow to the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/user/signin": {
      "post": {
        "tags": [
          "API#001 Authentication"
        ],
        "operationId": "signin",
        "security": [
          {
            "BasicAuthorization": []
          }
        ],
        "summary": "signin",
        "description": "Each user logs into Quora application using their username and password as credentials.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Authenticated successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "access-token": {
                "type": "string",
                "description": "Generated access token (JWT) of successfully authenticated user"
              }
            },
            "schema": {
              "$ref": "#/definitions/SigninResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/user/signout": {
      "post": {
        "tags": [
          "API#001 Authentication"
        ],
        "security": [
          {
            "BearerAuthorization": [
            ]
          }
        ],
        "operationId": "signout",
        "summary": "signout",
        "description": "User logs out of the Quora application.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          },
          {
            "in": "body",
            "name": "SignoutResponse",
            "description": "Response containing user signout information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignoutResponse"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Signed out successfully",
            "schema": {
              "$ref": "#/definitions/SignoutResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "Authorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory user credentials in Base64 encoded format."
    },
    "BearerAuthorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory user credentials in bearer http authentication scheme format."
    }
  },
  "definitions": {
    "SignupUserRequest": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First name of the new user"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the new user"
        },
        "user_name": {
          "type": "string",
          "description": "Username"
        },
        "email_address": {
          "type": "string",
          "description": "Email address of the new user"
        },
        "password": {
          "type": "string",
          "description": "Password of the new user",
          "format": "password",
          "x-obfuscated": true
        },
        "country": {
          "type": "string",
          "description": "Country of the new user"
        },
        "aboutMe": {
          "type": "string",
          "description": "Details of the new user"
        },
        "dob": {
          "type": "string",
          "description": "Date of birth of the new user"
        },
        "contact_number": {
          "type": "string",
          "description": "Mobile number of the new user"
        }
      },
      "required": [
        "first_name",
        "last_name",
        "user_name",
        "email_address",
        "password"
      ]
    },
    "SignupUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid of the signed up user"
        },
        "status": {
          "type": "string",
          "description": "message showing the status of the signed up user"
        }
      },
      "required": [
        "id",
        "status"
      ],
      "example": {
        "id": "utr-ret-tret34rwr-ewt",
        "status": "USER SUCCESSFULLY REGISTERED"
      }
    },
    "SigninResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid for the user authentication after he signs in."
        },
        "message": {
          "type": "string",
          "description": "message to show the status of the signed in user"
        }
      },
      "required": [
        "id",
        "message"
      ]
    },
    "SignoutResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid of the user who is signed out"
        },
        "message": {
          "type": "string",
          "description": "message to show the status of the signed out user"
        }
      },
      "required": [
        "id",
        "message"
      ]
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Application specific standard error code"
        },
        "message": {
          "type": "string",
          "description": "Error message stating the reason"
        },
        "root_cause": {
          "type": "string",
          "description": "Root cause of the Error"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "example": {
        "code": "USR-001",
        "message": "Email address already exist"
      }
    }
  }
}